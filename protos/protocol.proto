syntax = "proto3";

service ControlServiceActions{
    rpc StartTakeoff(Device) returns (Response);
    rpc StartGoUp(GoUpMessage) returns (Response);
    rpc StartMission(MissionData) returns (Response);
}

service ControlService{
    rpc StartControlService(StartInfo) returns (Response);
    rpc StopControlService(Empty) returns (Response);
    rpc GetControlServiceStatus(Empty) returns (Bool);

    rpc Wake_Up_Done(Device) returns (Response);

    rpc Take_Off_Connection_Failed(Device) returns (Response);
    rpc Take_Off_Connected_But_Failed(Device) returns (Response);
    rpc Take_Off_Done(Device) returns (Response);

    rpc Go_Up_Failed(Device) returns (Response);
    rpc Go_Up_Set_Settings_Failed(Device) returns (Response);
    rpc Go_Up_Set_Settings_Done(Device) returns (Response);
    rpc Go_Up_Done(Device) returns (Response);
}

message Bool {
    bool value = 1;
    string info = 2;
}

message Device {
    enum DeviceType {
        DRONE = 0;
        BATTERY_CHARGING_SYSTEM = 1;
        WEATHER_STATION = 2;
    }

    DeviceType type = 1;
    string id = 2;
    string access_data = 3;  // An json information about ips, ports, tokens, etc
}

message StartInfo {
    string aras_update_info_api_url = 1;
    string owner_id = 2;
    string base_id = 3;
    repeated Device drones = 4;
    Device battery_charging_system = 5;
    Device weather_station = 6;
}

message GoUpMessage {
    Device drone = 1;
    int32 altitude = 2; // meters
    int32 roll = 3; // meters
}

message Waypoint {
    float latitude = 1;
    float longitude = 2;
    float altitude = 3;
    float gimbal_pitch = 4; //The angle (-90, 45)
    float heading = 5;
    float speed = 6; //The drone's speed when traveling between waypoints
}

message MissionData{
    Device drone = 1;
    repeated Waypoint waypoints = 2 ;
}

message Response {
    enum ResponseType {
        ACK = 0;
        DONE = 1;
        FAILED = 2;
    }
    ResponseType response_type = 1;
    string info = 2;

}

message Empty {}
