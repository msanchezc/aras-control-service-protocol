# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aras_control_service_protocol.generated import protocol_pb2 as protocol__pb2


class ControlServiceActionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartTakeoff = channel.unary_unary(
                '/ControlServiceActions/StartTakeoff',
                request_serializer=protocol__pb2.Drone.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.StartGoUp = channel.unary_unary(
                '/ControlServiceActions/StartGoUp',
                request_serializer=protocol__pb2.GoUpMessage.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )


class ControlServiceActionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartTakeoff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGoUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlServiceActionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartTakeoff': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTakeoff,
                    request_deserializer=protocol__pb2.Drone.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'StartGoUp': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGoUp,
                    request_deserializer=protocol__pb2.GoUpMessage.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ControlServiceActions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControlServiceActions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartTakeoff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceActions/StartTakeoff',
            protocol__pb2.Drone.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartGoUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceActions/StartGoUp',
            protocol__pb2.GoUpMessage.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ControlServiceEventsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Take_Off_Connection_Failed = channel.unary_unary(
                '/ControlServiceEvents/Take_Off_Connection_Failed',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.Take_Off_Connected_But_Failed = channel.unary_unary(
                '/ControlServiceEvents/Take_Off_Connected_But_Failed',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.Take_Off_Done = channel.unary_unary(
                '/ControlServiceEvents/Take_Off_Done',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.Go_Up_Failed = channel.unary_unary(
                '/ControlServiceEvents/Go_Up_Failed',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.Go_Up_Set_Settings_Failed = channel.unary_unary(
                '/ControlServiceEvents/Go_Up_Set_Settings_Failed',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.Go_Up_Set_Settings_Done = channel.unary_unary(
                '/ControlServiceEvents/Go_Up_Set_Settings_Done',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )
        self.Go_Up_Done = channel.unary_unary(
                '/ControlServiceEvents/Go_Up_Done',
                request_serializer=protocol__pb2.DroneIdentifier.SerializeToString,
                response_deserializer=protocol__pb2.ACK.FromString,
                )


class ControlServiceEventsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Take_Off_Connection_Failed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Take_Off_Connected_But_Failed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Take_Off_Done(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Go_Up_Failed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Go_Up_Set_Settings_Failed(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Go_Up_Set_Settings_Done(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Go_Up_Done(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlServiceEventsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Take_Off_Connection_Failed': grpc.unary_unary_rpc_method_handler(
                    servicer.Take_Off_Connection_Failed,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'Take_Off_Connected_But_Failed': grpc.unary_unary_rpc_method_handler(
                    servicer.Take_Off_Connected_But_Failed,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'Take_Off_Done': grpc.unary_unary_rpc_method_handler(
                    servicer.Take_Off_Done,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'Go_Up_Failed': grpc.unary_unary_rpc_method_handler(
                    servicer.Go_Up_Failed,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'Go_Up_Set_Settings_Failed': grpc.unary_unary_rpc_method_handler(
                    servicer.Go_Up_Set_Settings_Failed,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'Go_Up_Set_Settings_Done': grpc.unary_unary_rpc_method_handler(
                    servicer.Go_Up_Set_Settings_Done,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
            'Go_Up_Done': grpc.unary_unary_rpc_method_handler(
                    servicer.Go_Up_Done,
                    request_deserializer=protocol__pb2.DroneIdentifier.FromString,
                    response_serializer=protocol__pb2.ACK.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ControlServiceEvents', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControlServiceEvents(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Take_Off_Connection_Failed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Take_Off_Connection_Failed',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Take_Off_Connected_But_Failed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Take_Off_Connected_But_Failed',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Take_Off_Done(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Take_Off_Done',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Go_Up_Failed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Go_Up_Failed',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Go_Up_Set_Settings_Failed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Go_Up_Set_Settings_Failed',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Go_Up_Set_Settings_Done(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Go_Up_Set_Settings_Done',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Go_Up_Done(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControlServiceEvents/Go_Up_Done',
            protocol__pb2.DroneIdentifier.SerializeToString,
            protocol__pb2.ACK.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
